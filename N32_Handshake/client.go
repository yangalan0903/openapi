/*
 * N32 Handshake API
 *
 * N32-c Handshake Service.  Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved. 
 *
 * Source file: 3GPP TS 29.573 V16.5.0; 5G System; Public Land Mobile Network (PLMN) Interconnection; Stage 3
 * Url: http://www.3gpp.org/ftp/Specs/archive/29_series/29.573/
 *
 * API version: 1.1.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package N32_Handshake

import (
    "crypto/tls"
    "golang.org/x/net/http2"
    "net/http"
)

// APIClient manages communication with the N32 Handshake API API v1.1.2
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
    cfg    *Configuration
    common service // Reuse a single struct instead of allocating one for each service on the heap.

    // API Services
}

type service struct {
    client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
    if cfg.httpClient == nil {
        cfg.httpClient = http.DefaultClient
        cfg.httpClient.Transport = &http2.Transport{
            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
        }
    }

    c := &APIClient{}
    c.cfg = cfg
    c.common.client = c

    // API Services

    return c
}
